{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","el","GifGrid","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAgCeA,EA9BY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAhBM,SAACP,GACfF,EAAeE,EAAEQ,OAAOF,a,QCKjBG,EAVK,SAAC,GAAyB,EAAtBC,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAE/B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAOF,EAAMG,IAAMJ,IACxB,4BAAKA,Q,uBCPJK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbN,EAFa,iDAEoCO,UAAWF,GAF/C,+DAIEG,MAAMR,GAJR,cAIbS,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAZvB,kBAgBZY,GAhBY,4CAAH,sDCyBLK,EArBM,SAAEZ,GAElB,MAA4BrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAFb,mBAAQC,EAAR,KAAeC,EAAf,KAgBD,OAXAC,qBAAW,WAEPjB,EAASC,GAAWiB,MAAM,SAAAC,GACtBH,EAAU,CACNT,KAAMY,EACNL,SAAS,SAIlB,CAACb,IAEGc,GCGIK,EAtBC,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEhB,EAAkCY,EAAcZ,GAAlCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIjB,UAAU,oCAAd,SAAoDI,IAElDa,GAAW,mBAAGjB,UAAU,oCAAb,qBACb,qBAAKA,UAAU,YAAf,SACMc,EAAOF,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eACyBA,GAAfA,EAAIhB,aCSnB2B,G,MApBM,WAEjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACA,8CACI,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAGA,6BACM2C,EAAWb,KAAK,SAAAR,GAAQ,OACtB,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,aCLpBsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.a246a4ed.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport PropTypes from 'prop-types'\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleAdd = (e) => {\r\n        setInputValue( e.target.value )\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if ( inputValue.trim().length > 2) {\r\n            setCategories( cat => [inputValue, ...cat ] )\r\n            setInputValue('')\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleAdd }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory","import React from \"react\";\r\n\r\nconst GifGridItem = ( { id, title, url } ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src= { url } alt={ title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem","export const getGifs = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=rOK3jREME6pvWBTrUc048XJRMDc3twDm`\r\n\r\n    const resp =  await  fetch(url)\r\n\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n    return gifs\r\n}\r\n","import {useEffect, useState} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\n\r\nconst useFetchGifs = ( category ) => {\r\n\r\n     const [ state, setState ] = useState({\r\n         data: [],\r\n         loading: true\r\n     })\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category ).then( el => {\r\n            setState( {\r\n                data: el,\r\n                loading: false\r\n            })\r\n        })\r\n\r\n    }, [category])\r\n\r\n    return state\r\n}\r\n\r\nexport default useFetchGifs","import GifGridItem from \"./GifGridItem\";\r\nimport useFetchGifs from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ( { category } ) => {\r\n\r\n    const { data: images, loading } = useFetchGifs( category )\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            { loading && <p className=\" animate__animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid\">\r\n                { images.map( img => (\r\n                    <GifGridItem\r\n                        key={ img.id }  { ...img }\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n)\r\n}\r\n\r\n\r\n\r\nexport default GifGrid","import React, {useState} from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\nimport './index.css'\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr/>\r\n\r\n            {/*<button onClick={() => handleAdd('hunter') }>Agregar</button>*/}\r\n            <ul>\r\n                { categories.map( category => (\r\n                    <GifGrid key={ category } category={ category }/>\r\n                )) }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from \"./GifExpertApp\";\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}